name: Azure Example Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Deploy to AKS'
        required: true
        default: 'deploy'

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CRED }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Retrieve AKS Credentials
        run: az aks get-credentials --resource-group Sysdig-RG --name sysdig-demo

      - name: List AKS Nodes
        run: kubectl get nodes

  scan-and-deploy:
    needs: setup-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Install Sysdig CLI
        run: |
          curl -LO "https://download.sysdig.com/scanning/bin/sysdig-cli-scanner/$(curl -L -s https://download.sysdig.com/scanning/sysdig-cli-scanner/latest_version.txt)/linux/amd64/sysdig-cli-scanner"
          chmod +x ./sysdig-cli-scanner
      
      - name: Pull Docker images
        run: |
          docker pull dockersamples/examplevotingapp_vote:latest &
          docker pull dockersamples/examplevotingapp_worker:latest &
          docker pull dockersamples/examplevotingapp_result:latest &
          wait

      - name: Scan Docker images with Sysdig
        run: |
          SECURE_API_TOKEN=${{ secrets.SYSDIG_API_TOKEN }} ./sysdig-cli-scanner --apiurl ${{ secrets.SYSDIG_ENDPOINT }} pull://dockersamples/examplevotingapp_vote:latest || true
          SECURE_API_TOKEN=${{ secrets.SYSDIG_API_TOKEN }} ./sysdig-cli-scanner --apiurl ${{ secrets.SYSDIG_ENDPOINT }} pull://dockersamples/examplevotingapp_worker:latest || true
          SECURE_API_TOKEN=${{ secrets.SYSDIG_API_TOKEN }} ./sysdig-cli-scanner --apiurl ${{ secrets.SYSDIG_ENDPOINT }} pull://dockersamples/examplevotingapp_result:latest || true

  promote-to-production:
    needs: scan-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Promote to Production
        run: |
          echo "Promoting to production..."

# Manual approval job
jobs:
  manual-approval:
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Manual Approval
        uses: wei/github-approval-action@v2
        with:
          number: 1
          workflow: ${{ github.workflow }}
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy Resources to AKS (After Approval)
        if: success() && github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy'
        run: |
          echo "Approved! Deploying resources to AKS..."
          kubectl apply -f k8s-specifications/
